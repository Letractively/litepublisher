[document]
type = class
name = tdata
source = lib/data.class.php
dependent = "litepublisher, tclasses, tdatabase"
description = 'Базовый класс для сохранения и восстановления данных и управления свойствами. Не имеет родительского класса, другие базовые классы порождены от этого класса. Имеет свойство [wiki:data] - ассоциативный массив, который сохраняется и обратно восстанавливается в файл или базу данных. Делает публичными свойства ключи этого массива. Обращение $instance->someprop и $instance->data["someprop"] эквивалентны. Чтобы добавить сохраняемое свойство достаточно добавить ключ в массив [[data]]. Также класс интерпретирует методы класса с именами начинающимися с get и set как методы доступа к свойствам. Например, если будет существовать метод getsomeprop(), то обращение $instance->someprop вызовет метод getsomeprop() для чтения и setsomeprop() для записи. Если эти методы не существуют, то будет проверен массив [[data]]. Таким образом для добавления нового свойства необходимо добавить свой метод с get/set либо установить элемент массива [[data]].'

example = ''

[method]
name = __construct
type = void
access = public
description = "Конструктор класса. инициализирует свойства [[data]], [[basename]], [[cache]], [[coinstances]], [[coclasses]]. Вызывает метод [[create]]."

[method]
name = create
type = void
access = protected 
description = "Вызывается из конструктора [[__create]]. В классе [[tdata]] ничего не выполняет и предназначен для последующего перекрытия в дочерних классах. Метод предназначен для инициализации данных класса."

[method]
name = __get
type = mixed
access = public
description = '**Волшебный** метод php. Выполняются проверки в следующей очередности:

- Если есть метод с именем get перед именем свойства, то возвращается результат этого метода
- Если есть ключ в массиве data, то возвращается его значение
- Если в массиве объектов [[coinstances]] есть такое свойство, то возвращается его значение
- вызывается метод [[error]] с сообщением, что свойство не найдено'

[method]
name = __set
type = boolean
access = public
description = "**Волшебный** метод php. Выполняются проверки в следующей очередности:
- если есть метод начинающийся с set с именем свойства, то вызывается этот метод
- если есть ключ в массиве data, то элементу массива присваивается значение
- если в массиве объектов [[coinstances]] у объекта есть такое свойство, то ему присваивается значение
 - возвращается false, что указывает, что свойство не найдено"

[method]
name = __call
type = mixed
access = public
description = "**Волшебный** метод php. Если Делаются следующие попытки вызовов:
- если есть метод с тем же именем в нижнем регистре
- если у объекта из массива [[coinstances]] есть такой метод
- вызывается [[error]] с сообщением, что метод не найден"

[method]
name = __isset
type = boolean
access = public
description = "**Волшебный** метод php. Возвращает true, если существует такое свойство у класса. Проверяет наличие ключа в массиве [[data]], а также метода get перед именем свойства"

[method]
name = error
type = void
access = public
description = "Вызывает исключение с. Если не хотите, чтобы ваш класс в случае ошибки создавал исключение, то перекройте этот метод"

[method]
name = getbasename
type = string
access = public
description = "Возвращает строку для имени файла, в котором хранятся данные. По умолчанию возвращает значение свойства [[basename]]. Используется в [[save]], [[load]] для генерации имени файла. Может включать подпапки используя для разделителя DIRECTORY_SEPARATOR"

[method]
name = install
type = void
access = public
description = "Вызывается, когда Lite Publisher инсталлирует класс. По умолчанию вызывает [[externalchain]]"

[method]
name = uninstall
type = void
access = public
description = "Вызывается, когда Lite Publisher деинсталлирует. По умолчанию вызывает [[externalchain]]"



[method]
name = validate
type = void
access = public
description = "В настоящее время не используется. Предполагается в будущем, что этот метод будет вызываться для проверки целостности данных и в случае повреждения их ремонта. По умолчанию вызывает [[externalchain]]"

[method]
name = externalchain
type = void
access = protected
description = "Метод проверяет наличие внешнего файла, то есть файла с именем **.install.php** в папке install, где находится файл класса, или той же самой папке. Если есть соответствующая функция, то она вызывается. Имя функции вычисляется как имя класса + имя метода, например Install или Uninstall (обратите внимание, что для внешних функций имя функции начинается с большой буквы для большой читабельности). Метод сделан для оптимизации кода с целью вывести во внешний файл редко используемые функции. Например функции инсталляции вызываются только один раз за все время жизни класса и поэтому хранить редко используемый код вместе с остальным невыгодно.

Метод вызывает цепочку [[externalfunc]] методов всех своих родительских классов. Поэтому будьте внимательны., когда создаете свои классы, так как их инсталляция может вызвать всю цепочку методов. Чтобы этого избежать перекрывайте метод [[install]] вашего класса."

[method]
name = externalfunc
type = void
access = protected
description = "Вызывает внешнею функцию находящуюся во внешнем файле. Имя внешнего файла это имя файла, В котором находится класс, и прибавленная к нему строка **.install** Метод предназначен для вызова очень редко используемых функций, например инсталляция и деинсталляция"

[method]
name = load
type = boolean
access = public
description = "Загружает данные для объекта либо из файла либо из базы данных, в зависимости от значения свойства [[dbversion]]. В случае удачной загрузки возвращает true, в случае отсутствия данных для загрузки (данные не были загружены) возвращает false."

[method]
name = save
type = boolean
access = public
description = "Пытается сохранить данные объекта либо в файл, либо в базу данных, в зависимости от значения свойства [[dbversion]]. Если [[savedisabled]] равно true или объект заблокирован (смотрите методы [[lock]] и [[unlock]]), то запись не происходит"

[method]
name = savetostring
type = string
access = public
description = "Возвращает строку, которая потом будет использована в [[loadfromstring]]. По умолчанию сериализует массив [[data]]"

[method]
name = loadfromstring
type = void
access = public
description = "Восстанавливает данные из строки. По умолчанию десериализует строку в массив [[data]]. Вызывает метод [[afterload]]"

[method]
name = afterload
type = void
access = public
description = "Вызывается после загрузки данных. В классе [[tdata]] ничего не делает. Предназначен для перекрытия в дочерних классах"

[method]
name = lock
type = void
access = public
description = "Блокирует сохранение данных, увеличивая внутренний счетчик. Применяется перед внесением изменений в данные. Обязательно использовать в паре с [[unlock]] после внесения изменений."

[method]
name = unlock
type = void
access = public
description = "Разблокирует данные, уменьшая внутренний счетчик. Если счетчик обнулился, то происходит сохранение данных. Обязательно применять в паре с [[lock]]. Непарное применение [[lock]] и [[unlock]] может привести к повреждению данных"

[method]
name = getclass
type = string
access = public
description = "Возвращает имя класса. Применяется как свойство [[class]]"

[method]
name = getdb
type = [[tdatabase]]
access = public
description = "Возвращает глобальный объект [[tdatabase]], в котором установлено имя текущей таблицы. Если методу передана пустая строка, то имя таблицы будет установлено в таблицу [[table]] объекта"

[method]
name = SaveToDB
type = void
access = protected
description = "Сохраняет данные в базу. По умолчанию сохраняет сериализованную строку. Практически в неперекрытом виде этот метод не применяется. Дочерние классы его перекрывают под свои данные"

[method]
name = LoadFromDB
type = boolean
access = protected
description = "Восстанавливает данные из базы. В не перекрытом виде практически не используется. Дочерние классы перекрывают его для своих данных"

[method]
name = savetofile
type = boolean
access = public
description = "Статический метод сохраняет безопасным способом данные в файл. Если файл уже существует, то старый файл переименовывается в **bak.php** Используется в методе [[save]]"

[method]
name = comment_php
type = string
access = public
description = "Статический метод конвертирует строку в комментарий php. Строка готова для сохранения в файл с расширением php."

[method]
name = uncomment_php
type = string
access = public
description = "Статический метод конвертирует строку из комментария php. Возвращается первоначальная строка. Два метода [[comment_php]] и [[uncomment_php]] противоположны друг другу, используются для безопасного сохранения и восстановления данных в файл. Поскольку данные находятся в комментарии, то даже если будет вдруг открыт доступ к файлам данных из web то данные все равно не будут переданы злоумышленникам"

[property]
name = cache
type = boolean
access = rw
description = "Свойство показывает [[turlmap]] следует ли кэшировать контент этого класса. Используется только в тех классах, которые генерируют контент. Для служебных классов не имеет значения."

[property]
name = data
type = array
access = rw
description = "Центральное свойство класса. В нем хранятся данные объекта, которые используются для виртуальных свойств. Этот массив сохраняется и восстанавливается в файлы"

[property]
name = savedisabled
type = boolean
access = rw
description = "Статическое глобальное свойство, если установить в true, то не будут сохранятся данные в файлы. Действует только для в файлов, для баз данных не гарантируется. Используется редко, например для тестирования импорта записей"
[property]
name = basename
type = string
access = rw
description = "Строка для формирования имени файла данных. Используется для хранения данных в файлах. Как правило равно свойству [[table]]"

[property]
name = coclasses
type = array
access = rw
description = "Массив имен соклассов. 	В [[tdata]] не используется, предназначен для дочерних классов"

[property]
name = coinstances
type = array
access = rw
description = "Массив объектов. Если в классе не будет найдено свойство или метод, то будет продолжен поиск среди объектов из массива [[coinstances]]"

[property]
name = lockcount
type = int
access = rw
description = "Счетчик блокировок. Изменять не рекомендуется. Для блокировки и разблокировки следует использовать методы [[lock]], [[unlock]]. Для проверки блокировки следует использовать свойство [[locked]]"

[property]
name = table
type = string
access = rw
description = "Имя таблицы в базе данных без общего префикса имен таблиц. Например для записей это будет posts. Используется только в бд версии. Смотри также [[thistable]] - полное имя таблицы"
"

[property]
name = locked
type = boolean
access = ro
description = "Возвращает true в случае блокировки объекта."

[property]
name = dbversion
type = boolean
access = ro
description = "Возвращает true если объект хранит свои данные в базе данных. По умолчанию возвращает false"

[property]
name = db
type = [[tdatabase]]
access = ro
description = "Возвращает базу данных, в которой уже установлена текущая таблица."

[property]
name = thistable
type = string
access = ro
description = "Имя таблицы включая общий префикс таблиц. Смотри также [[table]]"
