classname = tfilestorage 
source = lib/data.class.php

Класс только со статическими методами для сохранения и восстановления данных в файл для других классов. Используется в базовом классе [[tdata]]. Изредка может использоваться другими классами для сохранения и восстановления данных в нестандартных папках.

method = savetofile
type = boolean
access = public

Статический метод сохраняет безопасным способом данные в файл. Если файл уже существует, то старый файл переименовывается в **bak.php** Используется в нескольких методах. Если подключен memcache, то вначале записывает в memcache данные с ключом - имя файла. В случае невозможности записать файл на диск вызывает трасировку ошибки.

method = comment_php
type = string
access = public
Статический метод конвертирует строку в комментарий php. Строка готова для сохранения в файл с расширением php. Таким обрзом достигается некоторая безопасность данных в php файле, если егго открыть в браузере.

method = uncomment_php
type = string
access = public

Статический метод конвертирует строку из комментария php. Возвращается первоначальная строка. Два метода [[comment_php]] и [[uncomment_php]] составляют пару и противоположны друг другу, используются для безопасного сохранения и восстановления данных в файл. Поскольку данные находятся в комментарии, то даже если будет вдруг открыт доступ к файлам данных из web то данные все равно не будут переданы злоумышленникам

prop = disabled
type = boolean
access = rw

Статическое глобальное свойство, если установить в true, то не будут сохранятся данные в файлы. Действует только для файлов, для баз данных не гарантируется. Используется редко, например для тестирования импорта записей


prop = memcache
type = boolean, memcache
access = rw

Статическое глобальное свойство по умолчанию = false. Если вы хотите, чтобы LitePublisher использовал memcache (это несколько ускоряет работу сайта), то в корневом файле разкомментируйте инициализацию memcache. Безусловно, на ваашем сервере должен быть установлен и настроен предварительно сервер memcache и расширение PHP. В качестве ключей для memcache будут использованы абсолютные пути к сохраняемым файлам, так что несколько сайтов могут одновременно использовать memcache. Запись в файлы будет происходить всегда, чтение файлов вначале из memcache. Поэтомускорость сохранения данных останется прежней, ускорение будет при считывании данных.

method = save
type = boolean
access = public

Статический метод, который сохраняет объект в файл. Вызывает метод [[savetofile]]

method = savetofile
type = boolean
access = public

Статический метод, который комментирует и сохраняет строку в заданный файл.

method = load
type = boolean
access = public

Статический метод, который восстанавливает данные для объекта, вызывает [[loadfromfile]]

method = loadfromfile
type = string
access = public

Статический метод, который считывает данные из файла и их раскоментирует

method = getfile
type = string
access = public

Статический метод, который считывает файл, если включено использует memcache. Аналог функции file_get_contents, но может использовать memcache.

method = setfile
type = string
access = public

Статический метод, который записывает файл, если включено использует memcache. Аналог функции file_put_contents, но может использовать memcache.

method = savevar
type = boolean
access = public

Статический метод, который сохраняет переменную в файл. Переменная сериализуется.

method = loadvar
type = boolean
access = public

Статический метод, который загружает переменную из файла. Данные для переменной десириализуются.