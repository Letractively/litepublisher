classname = tevents
parent = tdata
source = lib/events.class.php
depended = 

Базовый класс для событий в Lite Publisher. Реализовано управление событиями. Смотрите также документ [[events]]. 

method = __construct
type = void
access = public

Конструктор класса. инициализирует события, связывает свойства с массивом [[data]] и вызывает метод [[load]] для загрузки данных класса. Родительский класс [[tdata]] в конструкторе не загружает данные, это делает класс [[tevents]].

method = create
type = void
access = protected

Добавляет в [[map]] массивы [[events]] и [[coclasses]]. Смотрите объяснения про [[map]], [[assignmap]], [[addmap]]

method = free
type = void
access = public

Удаляет объект из глобального списка объектов. Также вызывает метод [[free]] у всех объектов массива [[coinstances]]

method = assignmap
type = void
access = public

Связывает элементы массива [[data]] с декларированными свойствами объекта. Информация о связях между именами ключей и свойствами находятся в массиве [[map]]

method = afterload
type = void
access = public

Вызывается после загрузки данных. Вызывает метод [[assignmap]] для связывания загруженных свойств с декларированными свойствами. Также создает массив объектов [[coinstancess]] из имен классов массива [[coclasses]], которые были загружены вместе с остальными данными

method = addmap
type = void
access = public

Добавляет в массив [[map]] имя свойства и его значение по умолчанию, а также присваивает это значение ключу в массиве [[data]] и связывает декларируемое свойство с элементом массива.

method = __get
type = mixed
access = public

Волшебный метод php. Перед вызовом родительского метода [[tdata::__get]] проверяет наличие одноименного метода в объекте. Если метод с тем же именем существует, то возвращает ассоциативный массив с двумя ключами **class** и **func**, где соответственно имя класса и имя метода. Применяется для подписки на события других объектов.

method = __set
type = void
access = public

Волшебный метод php. Если родительский метод [[tdata::__set]] не нашел свойство, то проверяется существование события с именем свойства. Если событие существует, то происходит подписка на событие. Иначе вызывается [[error]] для сообщения об ошибкой, что свойство не найдено

method = __call
type = mixed
access = public

Если существует событие с именем вызываемого метода, то вызывается метод [[callevent]] для вызова обработчиков события, иначе вызывается родительский метод"

method = addevents
type = void
access = public

Добавляет имена событий в массив [[eventnames]]. Этот метод принимает неопределенное количество аргументов, где каждый аргумент - это имя добавляемого события

method = callevent
type = mixed
access = protected

Вызывает по очереди всех обработчиков (другими словами подписчиков) на событие. Поскольку подписчиков может быть несколько, то цикл вызовов обработчиков может быть прекращен внутри любого из подписчиков. Для прекращения обработки события подписчик создает исключение [[ECancelEvent]]. Возвращает результат последнего обработчика либо свойство [[ECancelEvent::result]] если было исключение [[ECancelEvent]]. Для создания исключения смотрите [[cancelevent]]

method = cancelevent
type = void
access = public

Статический метод, Создает исключение ECancelEvent для прекращения обработки событий. Рекомендуется вызывать именно этот метод для прекращения обработки событий, а не прямо создавать исключение

method = eventexists
type = boolean
access = public

Проверяет, существует ли такое событие в списке событий объекта

method = method_exists
type = boolean
access = public

Проверяет, существует ли такой метод у объекта, перекрывает родительский метод [[tdata::mthod_exists]], возвращает true если существует такое же имя события

method = setevent
type = void
access = public

Проверяет существование события и добавляет обработчик на событие в массив [[events]]. Если события не существует, то вызывается [[error]] с сообщением о не существующем событии

method = dosetevent
type = void
access = protected

Добавляет обработчик события, проверяет только на копию такого обработчика, больше проверок не делает.

method = delete_event_class
type = boolean
access = public

Удаляет из события первого обработчика с заданным именем класса. Возвращает true если был и удален обработчик, false если не было такого обработчика

method = unbind
type = void
access = public

Удаляет всех обработчиков событий для класса или объекта. В качестве аргумента метод принимает строку (имя класса) или сам объект.

method = seteventorder
type = void
access = public

Меняет очередность вызова обработчика события. Обработчики вызываются в  том порядке, в котором были добавлены. Метод используется, если требуется поднять или опустить обработчик в очереди обработчиков.

method = addcoclass
type = void
access = public

Добавляет имя класса в массив [[coclasses]], создает экземпляр класса и добавляет его в массив [[coinstancess]].

method = deletecoclass
type = void
access = public

Удаляет имя класса из массива [[coclasses]]

prop = events
type = array
access = protected

Ассоциативный массив событий. Ключ - это имя события, значение - массив обработчиков события. Обработчик события - это пара имя класса и его метод, которые будут вызваны при возникновении события. На одно событие может быть подписано несколько обработчиков. Если во время вызовов цепочки обработчиков не будет найден класс, то такой обработчик будет удален из массива.

prop = eventnames
type = array
access = protected

Массив имен событий. Попытка добавить обработчик на событие, имя которого отсутствует в этом списке приведет к исключению

prop = map
type = array
access = protected

Массив связей между декларированными свойствами класса и ключами массива [[data]]

