* Lite Publisher
* Copyright (C) 2010 Vladimir Yushko http://litepublisher.com/
* Dual licensed under the MIT (mit.txt)
* and GPL (gpl.txt) licenses.

 ФАЙЛ ТЕМЫ ДЛЯ CMS LitePublisher (другое название движка Блоголёт). В этом файле описываются и устанавливаются все шаблоны темы. Тема представляет собой набор вложенных друг в друга шаблонов, таким образом получается дерево шаблонов. Каждый из шаблонов - это готовый HTML с тегами Litepublisher. Теги  LitePUblisher - это выражения вида $object.property, где object - обект, а property - его свойство. Например $template.title или $template.content. Со списком всех доступных тегов вы можете ознакомится в документации.

О формате этого файла. В файле находятся обявления тегов и комментарии. Комментарии возможны только вне обявлений тегов и невозможны внутри тегов. Объявление тега выглядит следующим образом: $template.name =[ html тега $template.name] Перед $template могут быть только пробелы или строка сразу должна начинатся с $tempalte., иначе строка пропускается как комментарий.Для всех тегов можно опускать $template. для сокращения имени тега. Вместо квадратных скобок [] могут использоваться либо круглые ()ЛИБО ФИГУРНЫЕ{}скобки. Выбирать можно любые парные скобки, единственное условие - чтобы в тексте шаблона все открытые скобки закрывались. То есть если вы выбрали [], то текст шаблона должен закрыть все открытые в нем квадратные скобки.

На верхнем уровне иерархии шаблонов находятся всего несколько шаблонов:
$template - шаблон всей страницы целиком
$template.title - шаблон заголовка страницы
$template.menu - список страниц меню
$template.content - содержание, содержит все основные шаблоны
$template.sitebar - шаблон сайтбара и виджетов в нем

Начнем декларировать шаблоны верхнего уровня, и в начале обявим шаблон всей страницы целиком:
$template = {
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru">
<head>
	<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
	<title>$template.title</title>
	<link rel="stylesheet" href="$template.url/css/style.css" type="text/css" media="all" />
	<!--[if IE 6]>
		<script src="$template.url/css/DD_belatedPNG.js"></script>
		<script>		
		  DD_belatedPNG.fix('.rss, .rss-comments, .foaf, #lastcomments li, #lastposts li, .post-comments, .post-cat, .post-time, .post-tags, #header');
		 </script>
	<![endif]--> 
$template.meta
	$template.head
</head>
<body>
	<div id="header"><div id="logo"><span class="name"><a href="$options.url/">$options.name</a></span><span class="slogan">$options.description</span>
</div></div>
	<div id="topmenu">
	 $template.menu
</div>
<div id="out">
<div id="middle">
	<div id="content">

		$template.content
	</div>
	<div id="sidebar">
		$template.sitebar
	</div>
		
	<div id="footer">
	<div id="bottom">
	<ul id="footerbar">
		$template.sitebar
	</ul>
		
			<div id="copyright"><span class="blogolet"><a href="$options.url$options.home">$options.name</a></span>$template.footer</div>
	</div>
</div>
</div>
</div>	
</body>
</html>
}

Следует заметить, что вэтом шаблоне отсутствуют какие либо вложенные шаблоны. Сделано это специально для демонстрации общей структуры темы на самом верхнем уровне. Можно немного поподробнее остановиться на каждом из тегов. Самым первым встречается тег $template.title - заголовок страницы. Установим шаблон для заголовка страницы следующим образом:

$template.title = [$title | $options.name]

где $title - это например заголовок записи, а $options.name - название сайта в настройках. Мы уже объявили два шаблона в теме - 	$theme (шаблон всей страницы) и $template.title (заголовок страницы). Далее встречаются следующие теги, которые не являются шаблонами:
$template.url - адрес этой темы, исползуется чтобы указать адрес файлов темы. Нигде не декларируется, так как это не шаблон.
$template.head - стандартный html для секции HEAD HTML документа.
$options.url - адрес сайта
$options.name - название сайта
$options.description - описание сайта


Далее мы встречаем тег $template.menu - ЭТО СПИСОК МЕНЮ В ШАПКЕ САЙТА, ЗАДЕКЛАРИРУЕМ ШАБЛОН ДЛЯ ЭТОГО ТЕГА

$TEMPLATE.MENU = [
	<ul id="nav">
		$item = [<li><a href="$options.url$url" title="$title">$title</a>$submenu = [ <ul>$items</ul>]</li>]
		$current = [		<li class="current_page_item"><a href="$options.url$url" title="$title">$title</a>$submenu</li>]
	</ul>
]

В этом шаблоне мы встретили два вложенных шаблона: $item и $current, а шаблон $item имеет у себя вложенный шаблон  $submenu. Что же означают эти шаблоны? $item ОТВЕЧАЕТ ЗА элемент списка меню, $current отвечает за текущий элемент списка - когда ёоткрытая страница это меню, то эта ссылка может быть выделена. Вложенный в $item, шаблон $submenu отвечает за шаблон подменю - имеет смысл для тем поддерживающих всплывающее меню. Далее шаблон меню использует для генерации html списка меню следующие значения:

$url - адрес страницы меню, без адреса сайта
$options.url - адрес сайта, используется во многих шаблонах, вместе $optons.url и $URL ДАЮТ ПОЛНЫЙ АДРЕС СТРАНИЦЫ
$TITLE - ЗАГОЛОВОК МЕНЮ
$ITEMS - ИСПОЛЬЗУЕТСЯ В ШАБЛОНЕ ПОДМЕНЮ $SUBMENU, КОТОРОЕ ГЕНЕРИРУЕТСЯ движком.

Для того, чтобы указать, что тема не поддерживает всплывающее меню следует первой строкой в шаблоне меню поставить следующий html комментарий:
<!--nohover-->

Про меню все. Перейдем к  следующему очень важному тегу - $template.content. В нем содержатся шаблоны контента сайта. Перечислим эти шаблоны:
simple - шаблон для простых текстов, не имеет вложенных шаблонов и состоит из одной - двух строк
excerpts - шаблон для анонсов, включает в себя вложенные шаблоны
post - шаблон полной записи, включает в себя много шаблонов, в том числе комментарии и форму комментариев
navi  - шаблон ссылок для постраничной навигации, имеет вложенные шаблоны
menu - шаблон страницы меню, не имеет вложенных шаблонов
notfound - шаблон для страницы 404, не  имеет вложеных шаблонов
admin - шаблоны для админки, имеет вложенные шаблоны

Перейдем к заданию шаблонов контента. Начнем с простого - шаблон simple, который отвечает за вывод простого контента

	$template.content.simple = [
			<div class="simplecontent">$content</div>
]

Видим, что в этом шаблоне есть только одна переменная $content - в ней находится текст. Обявим еще один простой шаблон для страницы 404:

$template.content.notfound = [
			<div class="simplecontent">
				<h2 class="center">$lang.notfound </h2>
				<p class="center">$lang.nocontent</p>
]

Здесь мы видим использование двух тегов $lang.notfound и $lang.nocontent - эти значения берутся из языковых файлов lib/languages/*.ini, $lang.* всегда доступны в любом шаблоне и позволяют теме быть интернациональной.

 Перейдем к относительно более сложному шаблону - страница меню, и можем опустить употребление $template. Обявление content.menu = [ и обявление $template.content.menu = [ абсолютно равнозначны, единственный смысл опускать $template лишь в сокращении записи. Пропускание $template не избавлляет от испобьзования символа $ во вложенных шаблонах.

content.menu = [
			<div class="post" id="menu-$menu.id">
		        <h2>$menu.title</h2>
		        <div class="post-content">
					$menu.content
		        </div>
			</div>
]

В этом шаблоне мы видим использование теговдля меню $menu.*, а именно
$menu.id - уникальный id (число) меню
$menu.title - заголовок меню
$menu.content - текст страницы меню
у $menu есть и другие свойства, которые не использовались в этом шаблоне, например $menu.url, $menu.parent

Теперь можно переходить к более сложным шаблонам, каковым является шаблон записи. Можно объявить этот шаблон целиком со всеми вложенными шаблонами (формат файла темы это позволяет), но тогда будет сложнее комментировать каждый из шаблонов, поэтому постараемся обойтись минимумом вложенных шаблонов. Начнем:

content.post = [
			<div class="post" id="post-$post.id">
		        <h2><a href="$post.link" rel="bookmark" title="$lang.permalink $post.title">$post.iconlink$post.title</a></h2>
					<span class="post-date">$post.date</span>
					<span class="post-tags">$post.tagslinks</span>
						<div class="post-content">
       $post.filelist
							$post.content
							<div class="post-info">
								$post.subscriberss
								<span class="post-cat">$post.categorieslinks</span>	
							</div>
							$post.prevnext
						</div>
      $post.templatecomments
			</div>
]

Таким образом мы смогли обявить шаблон для записи обойдясь вообще без вложенных шаблонов. В шаблоне записи исползуется свойства обекта $post, рассмотрим их:

$post.id - уникальный id (число) записи
$post.link- полный адрес записи, включая адрес сайта
$lang.permalink - переведенная строка "постоянная ссылка на"
$post.title - заголовок записи
$post.iconlink - иконка записи, если есть, как правило это пустая строка
$post.date - отформатированная и переведенная дата публикации поста. о формате и шаблоне даты читайте ниже
$post.tagslinks - ссылки на метки записи, для них есть свой шаблон
$post.filelist - список файлов записи, длясписка есть свой шаблон
$post.content - текст записи
$post.categorieslinks - ссылки на рубрики записи, тоже можно задать шаблон
$post.subscriberss - ссылка на rss комментариев к записи, есть для этого тоже шаблон							
$post.prevnext - ссылки на следующую и предыдущую запис, можно задать для этих ссылок шаблон
$post.templatecomments - выводит список комментариев и форму для отправки комментария. имеет много вложенных шаблонов.

Теперь можно задать детальные шаблоны для каждого из приведенных в списке тегов, в конце рассмотрим шаблон комментариев, как самый сложный. Начнем по порядку - с шаблона формата даты публикации

content.post.date = [d.m.Y]

Как видим формат простой - это параметры для php функции date, и вданном случае это d.m.Y, дата будет переведена на язык сайта. Следующим тегом идет $post.tagslinks, зададим шаблон для списка меток

content.post.tagslinks = [
							$lang.tags: 
								$item = [ <a href="$options.url$url" title="$title">$icon$title</a>]
								$divider = [, ]
]

Шаблон получился не сложным, в нем присутствует строка $lang.tags - "Метки", а также два вложенных шаблона: $ITEM - ШАБЛОН ОДНОЙ МЕТКИ и $divider - шаблон разделителя ссылок. Все. Симметрично устроен шаблон для рубрик. Обявим его

content.post.categorieslinks = [
							$lang.categories: 
								$item = [ <a href="$options.url$url" title="$title">$icon$title</a>]
								$divider = [, ]
]

Вся разница между двумя этими шаблонами в $lang - в первом случае это "Метки", а во втором - "Рубрики".Перед тем, как расматривать шаблон списка файлов рассмотрим два несложных шаблона - ссылка на RSS и ссылки на следующую и предыдущую запись.

CONTENT.post.subscriberss = [
<span class="post-rsscomments"><a href="$post.rsscomments" title="$lang.subscribetorsscomments" >$lang.subscribetorsscomments</a></span>
]

В этом шаблоне встречаются два тега: $post.rsscomments - это адресс ссылки RSS комментариев записи, а $lang - строка "Подписаться на RSS комментариев". Все более чем просто. Также несложный шаблон ссыллок на следующую и предыдущую запись:

CONTENT.POST.PREVNEXT = [
								<div id="prevnext">
								$prev = [<p id="prev">&larr; $lang.prev <a rel="prev" href="$prevpost.link" title="$lang.permalink $prevpost.title">$prevpost.title</a></p>]
								$next = [<p id="next">$lang.next <a rel="next" href="$nextpost.link" title="$lang.permalink $nextpost.title">$nextpost.title</a> &rarr;</p>]
								</div>
]

В данном шаблоне использовались объекты $prevpost и $nextpost - предыдущая и следующая запись соответствено. Разрешено использовать любые теги для записи, здесь же использовались уже ранее встречавшиеся свойства записи link  и title. Перейдем к более сложному и важному шаблону - шаблон списка файлов.

content.post.filelist = [
								<ul id="files-$post.id">

  $file = [<li><a href="$options.files/files/$filename" title="$title">$description</a></li>]

  $image = <li><a rel="gale-$post.id" onclick="return jsiBoxOpen(this)" href="$options.files/files/$filename" title="$title">$preview$title</a></li>]

  $preview = [<img src="$options.files/files/$preview.filename" title="$title" alt="$title" />]

   $audio = [<li><a href="$options.files/files/$filename" title="$title">$title</a>
								<span id="audiofile-$id"><a onclick="playaudiofile('audiofile-$id', '$options.files/files/$filename');" title="$title">$lang.play</a></span></li>]

   $video = [<li><a href="$options.files/files/$filename" title="$title" id="videofile-$id">$title</a>
<a onclick="playvideofile('videofile-$id', '$options.files/files/$filename');" title="$title">$lang.play</a></li>]

								</ul>
]

Мы видим обявление в списке файлов шаблоны для разных типов. Несложно догадатся, какой шаблон отвечает за какой тип файлов

$file - отсутствует тип файла, скорее всего это бинарник
$image - картинка, по умолчанию к картинкам создаются миниатюры. Этот шаблон для картинок сразу организует их в галерею
$preview - шаблон для миниатюр, они используются в галереи
$audio - шаблон для аудиофайлов, этот шаблон включает плеер только по клику по ссылке "Воспроизвести"
$video - шаблон для видеороликов. Видеоплеер будет загружен по клику на ссылку "Воспроизвести"

LitePublisher генерирует список файлов на основе этих шаблонов, файлы сортируются по типам. Внутри шаблона длялюбого типа файла доступны свойства файла, а именно:
$id - уникальный id файла (число)
$media - тип файла, строка имеет одно из следующих значений: 'bin','image','icon','audio','video','document','executable','text','archive'
$parent - уникальный id родительского файла, в шаблонах = 0, кроме шаблона для миниатюр - $preview
$preview - уникальный id миниатюры, если миниатюры нет, то равен 0. Имеет смысл только для картинок
$icon - уникальный id иконки для этого типа файлов. В настоящее время не используется и равно 0.
$author - уникальный id автора файла. Имеет смысл при многопользовательском режиме.
$size - размер в байтах файла
$posted - дата добавления файла
$mime - mime тип файла, строка, не всегда возможно коректное значение
$filename - имя файла, включая папку относительно общей папки файлов. Полный адрес к файлу получается $options.files$filename
$title - название файла, если не было задано, то равно имени файла
$description - описание файла, пустая строка, если не задано 
$keywords - ключевые слова для файла, пустая строка, если не задано
$md5 - строка равна хешу md5 файла (32 букв и цифр), используется для фильтрации копий файлов, в шаблонах не используется
$height - высота картинки, для других типов файлов = 0
$width - ширина картинки, для других типов файлов = 0
$bitrate - не используется, равно 0
$framerate - не используется, равно 0
$samplingrate - не используется, равно 0
$channels - не используется, равно 0
$duration - не используется, равно 0

Вы можете использовать любую комбинацию этих значений в шаблоне файлов.