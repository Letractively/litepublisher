* Lite Publisher
* Copyright (C) 2010 Vladimir Yushko http://litepublisher.com/
* Dual licensed under the MIT (mit.txt)
* and GPL (gpl.txt) licenses.

 ФАЙЛ ТЕМЫ ДЛЯ CMS LitePublisher (другое название движка Блоголёт). В этом файле описываются и устанавливаются все шаблоны темы. Тема представляет собой набор вложенных друг в друга шаблонов, таким образом получается дерево шаблонов. Каждый из шаблонов - это готовый HTML с тегами Litepublisher. Теги  LitePUblisher - это выражения вида $object.property, где object - обект, а property - его свойство. Например $template.title или $template.content. Со списком всех доступных тегов вы можете ознакомится в документации.

О формате этого файла. В файле находятся обявления тегов и комментарии. Комментарии возможны только вне обявлений тегов и невозможны внутри тегов. Обявление тега выглядит следующим образом: $name =1` [ html тега name] Перед $name могут быть только пробелы или строка сразу должна начинатся с $name, иначе строка пропускается как комментарий.Вместо квадратных скобок [] могут использоваться либо круглые ()ЛИБО ФИГУРНЫЕ{}скобки. Выбирать можно любые парные скобки, единственное условие - чтобы в тексте шаблона все открытые скобки закрывались. То есть если вы выбрали [], то текст шаблона должен закрыть все открытые в нем квадратные скобки.

На верхнем уровне иерархии шаблонов находятся всего несколько шаблонов:
theme - шаблон всей страницы целиком
title - шаблон заголовка страницы
menu - список страниц меню
content - содержание, содержить все основные шаблоны
sitebar - шаблон сайтбара и виджетов в нем

Начнем декларировать шаблоны верхнего уровня, и в начале обявим шаблон всей страницы целиком:
$theme = {
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru">
<head>
	<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
	<title>$template.title</title>
	<link rel="stylesheet" href="$template.url/css/style.css" type="text/css" media="all" />
	<!--[if IE 6]>
		<script src="$template.url/css/DD_belatedPNG.js"></script>
		<script>		
		  DD_belatedPNG.fix('.rss, .rss-comments, .foaf, #lastcomments li, #lastposts li, .post-comments, .post-cat, .post-time, .post-tags, #header');
		 </script>
	<![endif]--> 
$template.meta
	$template.head
</head>
<body>
	<div id="header"><div id="logo"><span class="name"><a href="$options.url/">$options.name</a></span><span class="slogan">$options.description</span>
</div></div>
	<div id="topmenu">
	 $template.menu
</div>
<div id="out">
<div id="middle">
	<div id="content">

		$template.content
	</div>
	<div id="sidebar">
		$template.sitebar
	</div>
		
	<div id="footer">
	<div id="bottom">
	<ul id="footerbar">
		$template.sitebar
	</ul>
		
			<div id="copyright"><span class="blogolet"><a href="$options.url$options.home">$options.name</a></span>$template.footer</div>
	</div>
</div>
</div>
</div>	
</body>
</html>
}

Следует заметить, что вэтом шаблоне отсутствуют какие либо вложенные шаблоны. Сделано это специально для демонстрации общей структуры темы на самом верхнем уровне. Можно немного поподробнее остановиться на каждом из тегов. Самым первым встречается тег $template.title - заголовок страницы. Установим шаблон для заголовка страницы следующим образом:

$template.title = [$title | $options.name]

где $title - это например заголовок записи, а $options.name - название сайта в настройках. Мы уже объявили два шаблона в теме - 	$theme (шаблон всей страницы) и $template.title (заголовок страницы). Далее встречаются следующие теги, которые не являются шаблонами:
$template.url - адрес этой темы, исползуется чтобы указать адрес файлов темы. Нигде не декларируется, так как это не шаблон.
$template.head - стандартный html для секции HEAD HTML документа.
$options.url - адрес сайта
$options.name - название сайта
$options.description - описание сайта


Далее мы встречаем тег $template.menu - ЭТО СПИСОК МЕНЮ В ШАПКЕ САЙТА, ЗАДЕКЛАРИРУЕМ ШАБЛОН ДЛЯ ЭТОГО ТЕГА

$TEMPLATE.MENU = [
	<ul id="nav">
		$item = [<li><a href="$options.url$url" title="$title">$title</a>$submenu = [ <ul>$items</ul>]</li>]
		$current = [		<li class="current_page_item"><a href="$options.url$url" title="$title">$title</a>$submenu</li>]
	</ul>
]

В этом шаблоне мы встретили два вложенных шаблона: $item и $current, а шаблон $item имеет у себя вложенный шаблон  $submenu. Что же означают эти шаблоны? $item ОТВЕЧАЕТ ЗА элемент списка меню, $current отвечает за текущий элемент списка - когда ёоткрытая страница это меню, то эта ссылка может быть выделена. Вложенный в $item, шаблон $submenu отвечает за шаблон подменю - имеет смысл для тем поддерживающих всплывающее меню. Далее шаблон меню использует для генерации html списка меню следующие значения:

$url - адрес страницы меню, без адреса сайта
$options.url - адрес сайта, используется во многих шаблонах, вместе $optons.url и $URL ДАЮТ ПОЛНЫЙ АДРЕС СТРАНИЦЫ
$TITLE - ЗАГОЛОВОК МЕНЮ
$ITEMS - ИСПОЛЬЗУЕТСЯ В ШАБЛОНЕ ПОДМЕНЮ $SUBMENU, КОТОРОЕ ГЕНЕРИРУЕТСЯ движком.

Для того, чтобы указать, что тема не поддерживает всплывающее меню следует первой строкой в шаблоне меню поставить следующий html комментарий:
<!--nohover-->

Про меню все. Перейдем к  следующему очень важному тегу - $template.content. В нем содержатся шаблоны контента сайта. Перечислим эти шаблоны:
simple - шаблон для простых текстов, не имеет вложенных шаблонов и состоит из одной - двух строк
excerpts - шаблон для анонсов, включает в себя вложенные шаблоны
post - шаблон полной записи, включает в себя много шаблонов, в том числе комментарии и форму комментариев
navi  - шаблон ссылок для постраничной навигации, имеет вложенные шаблоны
menu - шаблон страницы меню, не имеет вложенных шаблонов
notfound - шаблон для страницы 404, не  имеет вложеных шаблонов
admin - шаблоны для админки, имеет вложенные шаблоны

Перейдем к заданию шаблонов контента. Начнем с простого - шаблон simple, который отвечает за вывод простого контента

	$template.content.simple = [
			<div class="simplecontent">$content</div>
]

Видим, что в этом шаблоне есть только одна переменная $content - в ней находится текст. Обявим еще один простой шаблон для страницы 404:

$template.content.notfound = [
			<div class="simplecontent">
				<h2 class="center">$lang.notfound </h2>
				<p class="center">$lang.nocontent</p>
]

Здесь мы видим использование двух тегов $lang.notfound и $lang.nocontent - эти значения берутся из языковых файлов lib/languages/*.ini, $lang.* всегда доступны в любом шаблоне и позволяют теме быть интернациональной.

 Перейдем к относительно более сложному шаблону - страница меню:
$template.content.menu = [
			<div class="post" id="menu-$menu.id">
		        <h2>$menu.title</h2>
		        <div class="post-content">
					$menu.content
		        </div>
			</div>
]

В этом шаблоне мы видим использование теговдля меню $menu.*, а именно
$menu.id - уникальный id (число) меню
$menu.title - заголовок меню
$menu.content - текст страницы меню
у $menu есть и другие свойства, которые не использовались в этом шаблоне, например $menu.url, $menu.parent

Теперь можно переходить к более сложным шаблонам, каковым является шаблон записи. Можно объявить этот шаблон целиком со всеми вложенными шаблонами (формат файла темы это позволяет), но тогда будет сложнее комментировать каждый из шаблонов, поэтому постараемся обойтись минимумом вложенных шаблонов. Начнем:

$template.content.post = [
			<div class="post" id="post-$post.id">
		        <h2><a href="$post.link" rel="bookmark" title="$lang.permalink $post.title">$post.iconlink$post.title</a></h2>
					<span class="post-date">$post.date</span>
					<span class="post-tags">$post.tagslinks</span>
						<div class="post-content">
       $post.filelist
							$post.content
							<div class="post-info">
								$post.subscriberss
								<span class="post-cat">$post.categorieslinks</span>	
							</div>
							$post.prevnext
						</div>
      $post.templatecomments
			</div>
]

Таким образом мы смогли обявить шаблон для записи обойдясь вообще без вложенных шаблонов. В шаблоне записи исползуется свойства обекта $post, рассмотрим их:

$post.id - уникальный id (число) записи
$post.link- полный адрес записи, включая адрес сайта
$lang.permalink - переведенная строка "постоянная ссылка на"
$post.title - заголовок записи
$post.iconlink - иконка записи, если есть, как правило это пустая строка
$post.date - отформатированная и переведенная дата публикации поста. о формате и шаблоне даты читайте ниже
$post.tagslinks - ссылки на метки записи, для них есть свой шаблон
$post.filelist - список файлов записи, длясписка есть свой шаблон
$post.content - текст записи
$post.categorieslinks - ссылки на рубрики записи, тоже можно задать шаблон
$post.subscriberss - ссылка на rss комментариев к записи, есть для этого тоже шаблон							
$post.prevnext - ссылки на следующую и предыдущую запис, можно задать для этих ссылок шаблон
$post.templatecomments - выводит список комментариев и форму для отправки комментария. имеет много вложенных шаблонов.

Теперь можно задать детальные шаблоны для каждого из приведенных в списке тегов, в конце рассмотрим шаблон комментариев, как самый сложный. Начнем по порядку - с шаблона формата даты публикации

$template.content.post.date = [d.m.Y]

Как видим формат простой - это параметры для php функции date, и вданном случае это d.m.Y, дата будет переведена на язык сайта. Следующим тегом идет $post.tagslinks, зададим шаблон для списка меток

$template.content.post.tagslinks = [
]